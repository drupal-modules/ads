<?xml version="1.0" encoding="UTF-8" ?>

<project name="ads123" phingVersion="2.4.11" basedir=".">

  <adhoc-task name="log"><![CDATA[

    require_once 'phing/listener/DefaultLogger.php';

    class LogTaskBuildListener extends DefaultLogger {

      /**
       * Fired before any targets are started.
       *
       * @param BuildEvent $event The BuildEvent
       */
      public function buildStarted(BuildEvent $event) {
      }

      /**
       * Fired after the last target has finished.
       *
       * @param BuildEvent $event The BuildEvent
       * @see BuildEvent::getException()
       */
      public function buildFinished(BuildEvent $event) {
        print "\n\nHuman readable log output:\n\n" . LogTask::$output;
        print date('Y-m-d H:i:s ') . str_repeat('-', 80) . "\n\n";
      }

      /**
       * Fired when a target is started.
       *
       * @param BuildEvent $event The BuildEvent
       * @see BuildEvent::getTarget()
       */
      public function targetStarted(BuildEvent $event) {
         //file_put_contents(LogTask::$fileName, $message = (date('Y-m-d H:i:s ') . str_repeat('  ', LogTask::$stackLevel) . '(entering "' . $event->getTarget()->getName() . '")' . "\n"), FILE_APPEND);
         //LogTask::$output .= $message;
        ++LogTask::$stackLevel;
      }

      /**
       * Fired when a target has finished.
       *
       * @param BuildEvent $event The BuildEvent
       * @see BuildEvent#getException()
       */
      public function targetFinished(BuildEvent $event) {
        --LogTask::$stackLevel;
      }

      /**
       * Fired when a task is started.
       *
       * @param BuildEvent $event The BuildEvent
       * @see BuildEvent::getTask()
       */
      public function taskStarted(BuildEvent $event) {

      }

      /**
       * Fired when a task has finished.
       *
       * @param BuildEvent $event The BuildEvent
       * @see BuildEvent::getException()
       */
      public function taskFinished(BuildEvent $event) {
      }

      /**
       * Fired whenever a message is logged.
       *
       * @param BuildEvent $event The BuildEvent
       * @see BuildEvent::getMessage()
       */
      public function messageLogged(BuildEvent $event) {
      }
    }


    class LogTask extends Task {

        private $text;
        private $level;
        public static $stackLevel = 0;
        private static $targetStack = array();
        public static $fileName = "debug.txt";
        public static $output = "";

        static $once = 0;

        private $indent = 0;

        function setIndent($value) {
          $this->indent = $value;
        }

        function setMessage($value) {
          $this->text = $value;
        }

        function setMsg($value) {
          $this->text = $value;
        }

        function setLevel($value) {
          $this->level = $value;
        }

      public function main () {
        if (!self::$once) {
          self::$once = 1;
          $this->getProject()->addBuildListener(new LogTaskBuildListener ());
          file_put_contents(self::$fileName, $message = (date('Y-m-d H:i:s ') . str_repeat('-', 80) . "\n"));
          self::$output .= $message;
        }

        $indent = str_repeat('  ', self::$stackLevel + $this->indent);

        $lines = explode("\n", $this->text);

        foreach ($lines as &$line) {
          $line = date('Y-m-d H:i:s ') . $indent . $line;
        }

        file_put_contents(self::$fileName, $message = implode("\n", $lines) . "\n", FILE_APPEND);
        self::$output .= $message;

      } //end main

    } //end LogTask

  ]]></adhoc-task>

  <adhoc-task name="checkresult"><![CDATA[

    class CheckResultTask extends Task {

      private $exit = false;
      private $indent = 0;

      function setExit($value) {
        $this->exit = $value;
      }

      function setIndent($value) {
        $this->indent = $value;
      }

      public function main () {
        $return = $this->getProject()->getProperty('app.return');
        $output = $this->getProject()->getProperty('app.output');

        if ($return != 0) {
          $log = $this->getProject()->createTask('log');
          $log->setMsg('Operation failed, details:');
          $log->setIndent($this->indent);
          $log->main();

          $log = $this->getProject()->createTask('log');
          $log->setMsg($output);
          $log->setIndent($this->indent + 1);
          $log->main();

          if ($this->exit) {
            // Quitting.
            throw new BuildException("Operation failed, details: \n" . $output . "\n");
          }
        }
        else {
          $log = $this->getProject()->createTask('log');
          $log->setMsg('Done');
          $log->setIndent($this->indent + 1);
          $log->main();
        }

      } //end main

    } //end LogTask

  ]]></adhoc-task>


</project>
