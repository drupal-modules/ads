<?xml version="1.0" encoding="UTF-8"?>
<!--
## Phing build script
## See: http://www.phing.info/
##
## Quick PEAR installation:
##  $> pear channel-discover pear.phing.info
##  $> pear install phing/phing
-->

<project name="build-ads" basedir="." default="build-ads">

  <property file="phing/build.properties"/>

  <!--
  ## Build
  -->
  <target name="build-ads" depends="
                build-ads-make,
                build-ads-install
                "/>

  <target name="build-ads-make" depends="
                build-init,
                build-drupal
                "/>

  <target name="build-ads-install" depends="
                build-init,
                install-drupal,
                set-dir-permissions,
                post-install-drupal
                "/>

  <!--
  ## Initialise
  -->
  <target name="build-init" depends="build-load-properties"/>

  <!--
  ## Load Properties
  -->
  <target name="build-load-properties">

    <echo message="Assigning project directories and files to phing properties..." level="debug"/>
      <property name="project.dir.dist" value="${phing.dir.build_ads}"/>
      <property name="project.dir.profile" value="${project.dir.dist}"/>
      <property name="project.dir.taxonomies" value="${project.dir.src}/sites/all/modules/ads/ads_features"/>
      <property name="project.dir.src" value="${project.dir.profile}/src"/>
      <property name="project.dir.src.ads_features" value="${project.dir.src}/sites/all/modules/ads/ads_features"/>
      <property name="project.file.makefile" value="build-ads.make"/>

    <echo message="Assigning drush properties..." level="debug"/>
      <property name="project.drush.args"         value="--verbose --yes"/>
      <property name="project.drush.cmd"          value="drush ${project.drush.args}"/>
      <property name="project.drush.make.args"    value="-y --prepare-install --working-copy --no-clean --no-gitinfofile --concurrency=12 --verbose"/>
      <property name="project.drush.make.args2"   value="-y --no-core --no-clean --prepare-install --working-copy --no-gitinfofile --concurrency=12 --verbose"/>

    <echo message="Loading configuration file..." level="debug"/>
      <available file="${project.dir.dist}/build.properties" property="project.properties.exist" />
      <if>
       <not><isset property="project.properties.exist"/></not>
       <then>
          <copy
            file="${project.dir.dist}/phing/build.properties.example"
            tofile="${project.dir.dist}/build.properties"
            overwrite="true"/>
          <!-- or: <exec command="cp -v ${project.dir.dist}/build.properties.example ${project.dir.dist}/build.properties"
            dir="${project.dir.dist}" checkreturn="true" /> -->

        <echo message="" />
        <echo message="Hello :)" />
        <echo message="Thank you for installing ADS distribution." />
        <echo message="I have created a build.properties in ${project.dir.dist}." />
        <echo message="" />
        <echo message="ACTION REQUIRED" />
        <echo message="Please edit this file with your settings." />
        <echo message="Thank You :)" />
        <fail message="See you again in a moment..." />
       </then>
       <else>
         <property file="${project.dir.dist}/build.properties" />
         <if>
         <isset property="properties.notset"/>
         <then>
          <echo message="ACTION REQUIRED!" />
          <echo message="Please edit ${project.dir.dist}/build.properties" />
          <echo message="After you finish, please delete properties.notset section." />
          <fail />
         </then>
         </if>
       </else>
      </if>

      <!-- Enable the pulling from other forks -->
      <if>
         <isset property="pullfrom" />
         <then>
            <!-- <echo message"Overriding gihub.user with ${pullfrom}" />
            <property name="github.user" value="${pullfrom}"/>-->
         </then>
      </if>

  </target>

  <!--
  ## Build Drupal code using drush make
  -->
  <target name="build-drupal" depends="build-init">
    <echo message="Downloading and building Drupal sources..."/>
      <exec command="${project.drush.cmd} make ${project.dir.profile}/${project.file.makefile} ${project.dir.src} ${project.drush.make.args}" dir="${project.dir.dist}" outputProperty="project.drupal.exists" passthru="1" LogOutput="true" />
      <!--
        <if><not><equals arg1="${project.drupal.exists}" arg2="0" /></not>
          <then>
            <echo message="Drupal instance exists, updating the existing sources..." />
            <exec command="${project.drush.cmd} make ${project.dir.profile}/${project.file.makefile} ${project.dir.src} ${project.drush.make.args2}" dir="${project.dir.dist}" LogOutput="true" />
          </then>
        </if>
        -->

  </target>

  <!--
  ## Install Drupal code using drush make
  -->
  <target name="install-drupal" depends="build-init">
    <echo message="Installing Drupal from the profile..."/>
      <property name="project.db.url" value="${project.db.driver}://${project.db.username}:${project.db.password}@${project.db.host}:${project.db.port}/${project.db.database}" />
      <exec command="${project.drush.cmd} site-install ads --db-url=${project.db.url}"
        dir="${project.dir.src}" returnProperty="cmd.return" passthru="1" LogOutput="true" />
        <if><not><equals arg1="${cmd.return}" arg2="0" /></not>
          <then>
            <fail msg="Can't install Drupal! Check your database connection at ${project.db.url}!" />
          </then>
        </if>

    <echo message="Changing admin password to '${project.drupal.admin.pass}'..."/>
      <exec command="${project.drush.cmd} upwd --password=&quot;${project.drupal.admin.pass}&quot; ${project.drupal.admin.user}"
        dir="${project.dir.src}" returnProperty="cmd.return" />
        <if><not><equals arg1="${cmd.return}" arg2="0" /></not>
          <then>
            <fail msg="Drupal was not installed properly, please check manually or re-run build with -debug option!" />
          </then>
        </if>

  </target>

  <!--
  ## Set proper system permissions
  -->
  <target name="set-dir-permissions" depends="build-init">
    <!-- Unix filesystem -->
    <if><equals arg1="${host.fstype}" arg2="UNIX" />
      <then>
        <echo message="Creating Drupal default files directory..."/>
          <exec command="mkdir -vp ${project.drupal.public.dir}" dir="${project.dir.src}" LogOutput="true" />
          <!-- <exec command="sudo chown -R ubuntu:www-data ${project.dir.src}/sites/default" dir="${project.drupal.public.dir}" /> -->
          <exec command="chmod -vR 775 ${project.drupal.public.dir}" dir="${project.dir.src}" LogOutput="true" />

        <echo message="Creating Drupal private files directory..."/>
          <exec command="mkdir -vp ${project.drupal.private.dir}" dir="${project.dir.src}" LogOutput="true" />
          <!-- <exec command="sudo chown -R ubuntu:www-data ${project.drupal.private.dir}" dir="${project.dir.dist}" /> -->
          <exec command="chmod -vR 775 ${project.drupal.private.dir}" dir="${project.dir.src}" LogOutput="true" />

      </then>
    <!-- Windows filesystem -->
    <elseif><equals arg1="${host.fstype}" arg2="WINNT" />
      <then>
        <echo message="Creating Drupal default files directory..."/>
          <exec command="mkdir ${project.drupal.public.dir}" dir="${project.dir.src}" />

        <echo message="Creating Drupal private files directory..."/>
          <exec command="mkdir ${project.drupal.private.dir}" dir="${project.dir.src}" />
      </then>
      </elseif>
    </if>
  </target>

  <!--
  ## Finalize Drupal installation
  -->
  <target name="post-install-drupal" depends="build-init">

    <!-- Update Database and Features -->
    <echo message="Updating DB..." />
      <exec command="${project.drush.cmd} updb" dir="${project.dir.src}" checkreturn="true" LogOutput="true" spawn="true" />

    <!-- Clear cache -->
    <!--
    <echo message="Clearing Drupal cache..." />
      <exec command="${project.drush.cmd} cc all" dir="${project.dir.src}" checkreturn="true" LogOutput="true" spawn="true" />
    -->

    <!-- Revert configuration from features -->
    <!-- Check if grep command is available -->
    <exec command="grep --version" dir="${project.dir.src}" outputProperty="project.cmd.avail.grep" />
      <if>
        <contains string="${project.cmd.avail.grep}" substring="grep" />
        <then>
          <!-- Checking if "features" module is enabled -->
          <exec command="${project.drush.cmd} pm-info features | grep -ci --regexp=&quot;Status\s+:\s:(enabled)&quot;" dir="${project.dir.src}" outputProperty="project.enabledmodules.features" />
            <if>
              <equals arg1="${project.enabledmodules.features}" arg2="1" />
              <then>
                <!-- Pull new configuration from features -->
                <echo message="Features module is enabled." />
                <echo message="Reverting features..." />
                  <exec command="${project.drush.cmd} features-revert-all" dir="${project.dir.src}" checkreturn="true" LogOutput="true" />
              </then>
              <else>
                <echo message="Features are not enabled. No revert will take place." />
              </else>
            </if>
        </then>
      </if>

    <!-- Run cron -->
    <echo message="Running Drupal cron..." />
      <exec command="${project.drush.cmd} --php=&quot;`which php` -d sendmail_path=/dev/null&quot; core-cron" dir="${project.dir.src}" checkreturn="true" LogOutput="true" spawn="true" />

    <!-- Done -->
    <echo message="Done." />
    <echo message="Distribution can be found in the directory: ${project.dir.src}" />

  </target>

</project>

